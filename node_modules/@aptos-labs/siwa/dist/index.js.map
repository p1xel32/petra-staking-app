{"version":3,"sources":["../src/core.ts","../src/internal.ts","../src/utils.ts","../src/serializers.ts"],"sourcesContent":["import type { PublicKey, Signature } from \"@aptos-labs/ts-sdk\";\nimport type {\n  AptosSignInInput,\n  AptosSignInRequiredFields,\n} from \"@aptos-labs/wallet-standard\";\nimport { sha3_256 } from \"@noble/hashes/sha3\";\nimport { arraysEqual } from \"./internal.js\";\nimport type {\n  VerificationComparisonError,\n  VerificationMessageError,\n  VerificationResult,\n} from \"./types.js\";\n\n/**\n * Create a SignIn message text from the input following the ABNF format defined in the Sign in with Aptos\n * specifications.\n *\n * @param input The input to create the SignIn message text from.\n *\n * @returns The SignIn message text.\n */\nexport function createSignInMessageText(\n  input: AptosSignInInput & AptosSignInRequiredFields,\n): string {\n  let message = `${input.domain} wants you to sign in with your Aptos account:\\n`;\n  message += `${input.address}`;\n\n  if (input.statement) {\n    message += `\\n\\n${input.statement}`;\n  }\n\n  const fields: string[] = [];\n  if (input.uri) {\n    fields.push(`URI: ${input.uri}`);\n  }\n  if (input.version) {\n    fields.push(`Version: ${input.version}`);\n  }\n  if (input.nonce) {\n    fields.push(`Nonce: ${input.nonce}`);\n  }\n  if (input.issuedAt) {\n    fields.push(`Issued At: ${input.issuedAt}`);\n  }\n  if (input.expirationTime) {\n    fields.push(`Expiration Time: ${input.expirationTime}`);\n  }\n  if (input.notBefore) {\n    fields.push(`Not Before: ${input.notBefore}`);\n  }\n  if (input.requestId) {\n    fields.push(`Request ID: ${input.requestId}`);\n  }\n  if (input.chainId) {\n    fields.push(`Chain ID: ${input.chainId}`);\n  }\n  if (input.resources) {\n    fields.push(\"Resources:\");\n    for (const resource of input.resources) {\n      fields.push(`- ${resource}`);\n    }\n  }\n\n  if (fields.length) {\n    message += `\\n\\n${fields.join(\"\\n\")}`;\n  }\n\n  return message;\n}\n\nconst DOMAIN =\n  \"(?<domain>[^\\\\n]+?) wants you to sign in with your Aptos account:\\\\n\";\nconst ADDRESS = \"(?<address>[^\\\\n]+)(?:\\\\n|$)\";\nconst STATEMENT = \"(?:\\\\n(?<statement>[\\\\S\\\\s]*?)(?:\\\\n|$))??\";\nconst URI = \"(?:\\\\nURI: (?<uri>[^\\\\n]+))?\";\nconst VERSION = \"(?:\\\\nVersion: (?<version>[^\\\\n]+))?\";\nconst NONCE = \"(?:\\\\nNonce: (?<nonce>[^\\\\n]+))?\";\nconst ISSUED_AT = \"(?:\\\\nIssued At: (?<issuedAt>[^\\\\n]+))?\";\nconst EXPIRATION_TIME = \"(?:\\\\nExpiration Time: (?<expirationTime>[^\\\\n]+))?\";\nconst NOT_BEFORE = \"(?:\\\\nNot Before: (?<notBefore>[^\\\\n]+))?\";\nconst REQUEST_ID = \"(?:\\\\nRequest ID: (?<requestId>[^\\\\n]+))?\";\nconst CHAIN_ID = \"(?:\\\\nChain ID: (?<chainId>[^\\\\n]+))?\";\nconst RESOURCES = \"(?:\\\\nResources:(?<resources>(?:\\\\n- [^\\\\n]+)*))?\";\nconst FIELDS = `${URI}${VERSION}${NONCE}${ISSUED_AT}${EXPIRATION_TIME}${NOT_BEFORE}${REQUEST_ID}${CHAIN_ID}${RESOURCES}`;\nconst MESSAGE = new RegExp(`^${DOMAIN}${ADDRESS}${STATEMENT}${FIELDS}\\\\n*$`);\n\nexport function parseSignInMessageText(\n  text: string,\n): VerificationResult<AptosSignInInput & AptosSignInRequiredFields> {\n  const match = MESSAGE.exec(text);\n  if (!match) return { valid: false, errors: [\"invalid_message\"] };\n\n  const groups = match.groups;\n  if (!groups) return { valid: false, errors: [\"invalid_message\"] };\n\n  const errors: VerificationMessageError[] = [];\n\n  if (!groups.domain || groups.domain === \"undefined\")\n    errors.push(\"message_domain_missing\");\n  if (!groups.address || groups.address === \"undefined\")\n    errors.push(\"message_address_missing\");\n  if (!groups.version || groups.version === \"undefined\")\n    errors.push(\"message_version_missing\");\n  if (!groups.chainId || groups.chainId === \"undefined\")\n    errors.push(\"message_chain_id_missing\");\n\n  if (errors.length) return { valid: false, errors };\n\n  return {\n    valid: true,\n    data: {\n      domain: groups.domain,\n      address: groups.address,\n      statement: groups.statement,\n      uri: groups.uri,\n      version: groups.version,\n      nonce: groups.nonce,\n      chainId: groups.chainId,\n      issuedAt: groups.issuedAt,\n      expirationTime: groups.expirationTime,\n      notBefore: groups.notBefore,\n      requestId: groups.requestId,\n      resources: groups.resources?.split(\"\\n- \").slice(1),\n    },\n  };\n}\n\n/**\n * Verifies an input SignIn message against expected fields.\n *\n * @param input The input to verify the message against.\n * @param expected The expected message to verify against the input.\n *\n * @returns The verification result.\n */\nexport function verifySignInMessage(\n  input: AptosSignInInput,\n  expected: string,\n  options?: { excludedResources?: string[] },\n): VerificationResult<AptosSignInInput & AptosSignInRequiredFields> {\n  const parsedFields = parseSignInMessageText(expected);\n  if (!parsedFields.valid) return parsedFields;\n\n  const errors: VerificationComparisonError[] = [];\n\n  if (input.address && input.address !== parsedFields.data.address)\n    errors.push(\"message_address_mismatch\");\n  if (input.statement !== parsedFields.data.statement)\n    errors.push(\"message_statement_mismatch\");\n  if (input.uri && input.uri !== parsedFields.data.uri)\n    errors.push(\"message_uri_mismatch\");\n  if (input.version && input.version !== parsedFields.data.version)\n    errors.push(\"message_version_mismatch\");\n  if (input.chainId && input.chainId !== parsedFields.data.chainId)\n    errors.push(\"message_chain_id_mismatch\");\n  if (input.nonce !== parsedFields.data.nonce)\n    errors.push(\"message_nonce_mismatch\");\n  if (input.issuedAt !== parsedFields.data.issuedAt)\n    errors.push(\"message_issued_at_mismatch\");\n  if (input.expirationTime !== parsedFields.data.expirationTime)\n    errors.push(\"message_expiration_time_mismatch\");\n  if (input.notBefore !== parsedFields.data.notBefore)\n    errors.push(\"message_not_before_mismatch\");\n  if (input.requestId !== parsedFields.data.requestId)\n    errors.push(\"message_request_id_mismatch\");\n\n  // If the domain is unexpectedly provided, it must be verified.\n  if (\n    // biome-ignore lint/suspicious/noExplicitAny: May be present in the input.\n    (input as any).domain &&\n    // biome-ignore lint/suspicious/noExplicitAny: May be present in the input.\n    (input as any).domain !== parsedFields.data.domain\n  )\n    errors.push(\"message_domain_mismatch\");\n\n  if (input.resources) {\n    if (!parsedFields.data.resources) {\n      errors.push(\"message_resources_missing\");\n    } else if (\n      !arraysEqual(\n        input.resources,\n        parsedFields.data.resources,\n        options?.excludedResources,\n      )\n    ) {\n      errors.push(\"message_resources_mismatch\");\n    }\n  } else if (parsedFields.data.resources) {\n    errors.push(\"message_resources_unexpected\");\n  }\n\n  if (errors.length) return { valid: false, errors };\n\n  // TODO: Add time verifications\n\n  return { valid: true, data: parsedFields.data };\n}\n\n/**\n * Verifies outputs from a `signIn` method response against input fields.\n *\n * @param input The input to verify the output against.\n * @param output The output to verify against the input.\n *\n * @returns The verification result.\n */\nexport function verifySignIn(\n  input: AptosSignInInput & { domain: string },\n  output: { publicKey: PublicKey; signature: Signature; message: string },\n  options?: { excludedResources?: string[] },\n): VerificationResult<AptosSignInInput & AptosSignInRequiredFields> {\n  const messageVerification = verifySignInMessage(\n    input,\n    output.message,\n    options,\n  );\n  if (!messageVerification.valid) return messageVerification;\n\n  const isSignatureValid = output.publicKey.verifySignature({\n    message: generateSignInSigningMessage(output.message),\n    signature: output.signature,\n  });\n  if (!isSignatureValid) return { valid: false, errors: [\"invalid_signature\"] };\n\n  return { valid: true, data: messageVerification.data };\n}\n\n/**\n * Generate a signing message using the Sign in with Aptos signing algorithm.\n * sha3_256( sha3_256(b\"SIGN_IN_WITH_APTOS::\" ) || <message> )\n *\n * @param message The SIWA message to sign.\n *\n * @returns The signing message.\n */\nexport function generateSignInSigningMessage(message: string): Uint8Array {\n  const domainSeparator = \"SIGN_IN_WITH_APTOS::\";\n  const domainSeparatorHash = sha3_256(domainSeparator);\n  return new Uint8Array([\n    ...domainSeparatorHash,\n    ...new TextEncoder().encode(message),\n  ]);\n}\n","/**\n * @internal\n *\n * Type with a numeric `length` and numerically indexed elements of a generic type `T`.\n *\n * For example, `Array<T>` and `Uint8Array`.\n *\n * @group Internal\n */\nexport interface Indexed<T> {\n  length: number;\n  [index: number]: T;\n}\n\n/**\n * @internal\n *\n * Efficiently compare {@link Indexed} arrays (e.g. `Array` and `Uint8Array`).\n *\n * @param a An array.\n * @param b Another array.\n * @param excludedValues Values to exclude from `a` the comparison.\n *\n * @return `true` if the arrays have the same length and elements, `false` otherwise.\n *\n * @group Internal\n */\nexport function arraysEqual<T>(\n  a: Indexed<T>,\n  b: Indexed<T>,\n  excludedValues?: T[],\n): boolean {\n  if (a === b) return true;\n\n  const length = a.length;\n  if (length !== b.length) return false;\n\n  for (let i = 0; i < length; i++) {\n    if (excludedValues?.includes(a[i])) continue;\n    if (a[i] !== b[i]) return false;\n  }\n\n  return true;\n}\n\n/**\n * @internal\n *\n * Encode a `Uint8Array` to a base64 string.\n *\n * @param bytes A `Uint8Array` to encode.\n *\n * @returns A base64 encoded string.\n *\n * @group Internal\n */\nexport function encodeBase64(bytes: Uint8Array): string {\n  const base64Alphabet =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  let result = \"\";\n  for (let i = 0; i < bytes.byteLength; i += 3) {\n    let buffer = 0;\n    let bufferBitSize = 0;\n    for (let j = 0; j < 3 && i + j < bytes.byteLength; j++) {\n      buffer = (buffer << 8) | bytes[i + j];\n      bufferBitSize += 8;\n    }\n    for (let j = 0; j < 4; j++) {\n      if (bufferBitSize >= 6) {\n        result += base64Alphabet[(buffer >> (bufferBitSize - 6)) & 0x3f];\n        bufferBitSize -= 6;\n      } else if (bufferBitSize > 0) {\n        result += base64Alphabet[(buffer << (6 - bufferBitSize)) & 0x3f];\n        bufferBitSize = 0;\n      }\n    }\n  }\n  return result;\n}\n","import {\n  type PublicKey,\n  SigningScheme,\n  Ed25519PublicKey,\n  MultiEd25519PublicKey,\n  AnyPublicKey,\n  MultiKey,\n  type HexInput,\n  Hex,\n  Deserializer,\n  Ed25519Signature,\n  MultiEd25519Signature,\n  AnySignature,\n  type Signature,\n  MultiKeySignature,\n} from \"@aptos-labs/ts-sdk\";\nimport { encodeBase64 } from \"./internal.js\";\n\n/**\n * Check if the scheme is a valid public key scheme\n *\n * @param scheme The scheme to check.\n *\n * @returns True if the scheme is a valid public key scheme, false otherwise.\n */\nexport const isValidPublicKeyScheme = (\n  scheme: string,\n): scheme is \"ed25519\" | \"multi_ed25519\" | \"single_key\" | \"multi_key\" => {\n  return (\n    scheme === \"ed25519\" ||\n    scheme === \"multi_ed25519\" ||\n    scheme === \"single_key\" ||\n    scheme === \"multi_key\"\n  );\n};\n\n/**\n * Get the signing scheme of a public key.\n *\n * @param value The public key or signing scheme to get the scheme of.\n *\n * @returns The signing scheme of the public key.\n */\nexport function getSignInPublicKeyScheme(\n  value: SigningScheme | PublicKey,\n): string {\n  // If the value is a PublicKey\n  if (typeof value === \"object\") {\n    if (Ed25519PublicKey.isInstance(value)) {\n      return \"ed25519\";\n    }\n    if (AnyPublicKey.isInstance(value)) {\n      return \"single_key\";\n    }\n    if (MultiKey.isInstance(value)) {\n      return \"multi_key\";\n    }\n    if (value instanceof MultiEd25519PublicKey) {\n      return \"multi_ed25519\";\n    }\n    throw new Error(`Unknown public key type for instance: ${value}`);\n  }\n\n  // If the value is a SigningScheme\n  switch (value) {\n    case SigningScheme.Ed25519:\n      return \"ed25519\";\n    case SigningScheme.MultiEd25519:\n      return \"multi_ed25519\";\n    case SigningScheme.SingleKey:\n      return \"single_key\";\n    case SigningScheme.MultiKey:\n      return \"multi_key\";\n    default:\n      throw new Error(`Unknown public key type for signing scheme: ${value}`);\n  }\n}\n\n/**\n * Deserialize a public key from a hex string.\n *\n * @param scheme The signing scheme of the public key.\n * @param value The hex string to deserialize.\n *\n * @returns The deserialized public key.\n */\nexport function deserializeSignInPublicKey(\n  scheme:\n    | SigningScheme\n    | \"ed25519\"\n    | \"multi_ed25519\"\n    | \"single_key\"\n    | \"multi_key\",\n  value: HexInput,\n): PublicKey {\n  const deserializer = new Deserializer(Hex.fromHexInput(value).toUint8Array());\n\n  if (typeof scheme !== \"string\") {\n    switch (scheme) {\n      case SigningScheme.Ed25519:\n        return Ed25519PublicKey.deserialize(deserializer);\n      case SigningScheme.MultiEd25519:\n        return MultiEd25519PublicKey.deserialize(deserializer);\n      case SigningScheme.SingleKey:\n        return AnyPublicKey.deserialize(deserializer);\n      case SigningScheme.MultiKey:\n        return MultiKey.deserialize(deserializer);\n      default:\n        throw new Error(\n          `Unknown public key type for signing scheme: ${scheme}`,\n        );\n    }\n  }\n\n  // If the type is a string\n  switch (scheme) {\n    case \"ed25519\":\n      return Ed25519PublicKey.deserialize(deserializer);\n    case \"multi_ed25519\":\n      return MultiEd25519PublicKey.deserialize(deserializer);\n    case \"single_key\":\n      return AnyPublicKey.deserialize(deserializer);\n    case \"multi_key\":\n      return MultiKey.deserialize(deserializer);\n    default:\n      throw new Error(`Unknown public key type: ${scheme}`);\n  }\n}\n\nexport function deserializeSignInSignature(\n  scheme:\n    | SigningScheme\n    | \"ed25519\"\n    | \"multi_ed25519\"\n    | \"single_key\"\n    | \"multi_key\",\n  value: HexInput,\n): Signature {\n  const deserializer = new Deserializer(Hex.fromHexInput(value).toUint8Array());\n\n  if (typeof scheme !== \"string\") {\n    switch (scheme) {\n      case SigningScheme.Ed25519:\n        return Ed25519Signature.deserialize(deserializer);\n      case SigningScheme.MultiEd25519:\n        return MultiEd25519Signature.deserialize(deserializer);\n      case SigningScheme.SingleKey:\n        return AnySignature.deserialize(deserializer);\n      case SigningScheme.MultiKey:\n        return MultiKeySignature.deserialize(deserializer);\n      default:\n        throw new Error(`Unknown signature type for signing scheme: ${scheme}`);\n    }\n  }\n  // If the type is a string\n  switch (scheme) {\n    case \"ed25519\":\n      return Ed25519Signature.deserialize(deserializer);\n    case \"multi_ed25519\":\n      return MultiEd25519Signature.deserialize(deserializer);\n    case \"single_key\":\n      return AnySignature.deserialize(deserializer);\n    case \"multi_key\":\n      return MultiKeySignature.deserialize(deserializer);\n    default:\n      throw new Error(`Unknown signature type: ${scheme}`);\n  }\n}\n\nexport function generateNonce(): string {\n  const bytes = new Uint8Array(12);\n  crypto.getRandomValues(bytes);\n  return encodeBase64(bytes);\n}\n","import type { AptosSignInOutput } from \"@aptos-labs/wallet-standard\";\nimport type { PublicKey, Signature } from \"@aptos-labs/ts-sdk\";\nimport {\n  deserializeSignInSignature,\n  deserializeSignInPublicKey,\n  isValidPublicKeyScheme,\n} from \"./utils.js\";\n\nexport const SERIALIZATION_VERSION = \"1\";\n\nexport type SerializedAptosSignInOutput = {\n  version: typeof SERIALIZATION_VERSION;\n  type: string;\n  signature: string;\n  message: string;\n  publicKey: string;\n};\n\nexport type DeserializedAptosSignInOutput = {\n  type: string;\n  signature: Signature;\n  message: string;\n  publicKey: PublicKey;\n};\n\nexport const serializeSignInOutput = (\n  output: Pick<\n    AptosSignInOutput,\n    \"type\" | \"signature\" | \"plainText\" | \"account\"\n  >,\n): SerializedAptosSignInOutput => ({\n  version: SERIALIZATION_VERSION,\n  type: output.type,\n  signature: output.signature.bcsToHex().toString(),\n  message: output.plainText,\n  publicKey: output.account.publicKey.bcsToHex().toString(),\n});\n\nexport const deserializeSignInOutput = (\n  serialized: SerializedAptosSignInOutput,\n): DeserializedAptosSignInOutput => {\n  const { version } = serialized;\n\n  if (version === SERIALIZATION_VERSION) {\n    if (!isValidPublicKeyScheme(serialized.type)) {\n      throw new Error(`Unexpected public key scheme: ${serialized.type}`);\n    }\n\n    return {\n      type: serialized.type,\n      signature: deserializeSignInSignature(\n        serialized.type,\n        serialized.signature,\n      ),\n      publicKey: deserializeSignInPublicKey(\n        serialized.type,\n        serialized.publicKey,\n      ),\n      message: serialized.message,\n    };\n  }\n\n  throw new Error(`Unexpected serialization version: ${version}`);\n};\n"],"mappings":"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","names":["sha3_256","arraysEqual","a","b","excludedValues","length","i","encodeBase64","bytes","base64Alphabet","result","buffer","bufferBitSize","j","createSignInMessageText","input","message","fields","resource","DOMAIN","ADDRESS","STATEMENT","URI","VERSION","NONCE","ISSUED_AT","EXPIRATION_TIME","NOT_BEFORE","REQUEST_ID","CHAIN_ID","RESOURCES","FIELDS","MESSAGE","parseSignInMessageText","text","match","groups","errors","verifySignInMessage","expected","options","parsedFields","arraysEqual","verifySignIn","output","messageVerification","generateSignInSigningMessage","domainSeparatorHash","sha3_256","SigningScheme","Ed25519PublicKey","MultiEd25519PublicKey","AnyPublicKey","MultiKey","Hex","Deserializer","Ed25519Signature","MultiEd25519Signature","AnySignature","MultiKeySignature","isValidPublicKeyScheme","scheme","getSignInPublicKeyScheme","value","Ed25519PublicKey","AnyPublicKey","MultiKey","MultiEd25519PublicKey","SigningScheme","deserializeSignInPublicKey","deserializer","Deserializer","Hex","deserializeSignInSignature","Ed25519Signature","MultiEd25519Signature","AnySignature","MultiKeySignature","generateNonce","bytes","encodeBase64","SERIALIZATION_VERSION","serializeSignInOutput","output","deserializeSignInOutput","serialized","version","isValidPublicKeyScheme","deserializeSignInSignature","deserializeSignInPublicKey"]}