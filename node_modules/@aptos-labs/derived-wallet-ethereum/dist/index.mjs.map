{"version":3,"sources":["../src/EIP1193DerivedPublicKey.ts","../src/createSiweEnvelope.ts","../src/EIP1193DerivedSignature.ts","../src/EIP1193DerivedWallet.ts","../src/shared.ts","../src/signAptosMessage.ts","../src/signAptosTransaction.ts","../src/setupAutomaticDerivation.ts"],"sourcesContent":["import {\n  computeDerivableAuthenticationKey,\n  encodeStructuredMessage,\n  parseAptosSigningMessage,\n} from \"@aptos-labs/derived-wallet-base\";\nimport {\n  AccountPublicKey,\n  AptosConfig,\n  AuthenticationKey,\n  Deserializer,\n  hashValues,\n  Hex,\n  HexInput,\n  Serializer,\n  Signature,\n  VerifySignatureArgs,\n} from \"@aptos-labs/ts-sdk\";\nimport { verifyMessage as verifyEthereumMessage } from \"ethers\";\nimport { createSiweEnvelopeForAptosTransaction } from \"./createSiweEnvelope\";\nimport {\n  EIP1193SiweSignature,\n  EIP1193PersonalSignature,\n} from \"./EIP1193DerivedSignature\";\nimport { EthereumAddress } from \"./shared\";\n\nexport interface EIP1193DerivedPublicKeyParams {\n  domain: string;\n  ethereumAddress: EthereumAddress;\n  authenticationFunction: string;\n}\n\nexport class EIP1193DerivedPublicKey extends AccountPublicKey {\n  readonly domain: string;\n  readonly ethereumAddress: EthereumAddress;\n  readonly authenticationFunction: string;\n\n  private readonly _authKey: AuthenticationKey;\n\n  constructor({\n    domain,\n    ethereumAddress,\n    authenticationFunction,\n  }: EIP1193DerivedPublicKeyParams) {\n    super();\n    this.domain = domain;\n    this.ethereumAddress = ethereumAddress;\n    this.authenticationFunction = authenticationFunction;\n\n    this._authKey = computeDerivableAuthenticationKey(\n      authenticationFunction,\n      ethereumAddress,\n      domain\n    );\n  }\n\n  authKey(): AuthenticationKey {\n    return this._authKey;\n  }\n\n  verifySignature({ message, signature }: VerifySignatureArgs): boolean {\n    const parsedSigningMessage = parseAptosSigningMessage(message);\n\n    if (!parsedSigningMessage) {\n      return false;\n    }\n\n    let messageBytes: Uint8Array | string;\n    // Handle structured message, i.e. a message signed withAptosSignMessageInput\n    if (parsedSigningMessage.type === \"structuredMessage\") {\n      if (!(signature instanceof EIP1193PersonalSignature)) return false;\n\n      messageBytes = encodeStructuredMessage(\n        parsedSigningMessage.structuredMessage\n      );\n    } else {\n      // Handle transaction\n      if (!(signature instanceof EIP1193SiweSignature)) return false;\n      const { issuedAt } = signature;\n      const signingMessageDigest = hashValues([message]);\n      // Obtain SIWE envelope for the signing message\n      const envelopeInput = {\n        ethereumAddress: this.ethereumAddress,\n        signingMessageDigest,\n        issuedAt,\n      };\n\n      messageBytes = createSiweEnvelopeForAptosTransaction({\n        ...parsedSigningMessage,\n        ...envelopeInput,\n        chainId:\n          parsedSigningMessage.rawTransaction.rawTransaction.chain_id.chainId,\n      });\n    }\n\n    // Verify the signature\n    const { siweSignature } = signature;\n\n    const recoveredAddress = verifyEthereumMessage(messageBytes, siweSignature);\n    return recoveredAddress === this.ethereumAddress;\n  }\n\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n  }): Promise<boolean> {\n    return this.verifySignature({\n      message: args.message,\n      signature: args.signature,\n    });\n  }\n\n  // region Serialization\n\n  serialize(serializer: Serializer) {\n    serializer.serializeStr(this.domain);\n    serializer.serializeFixedBytes(\n      Hex.fromHexInput(this.ethereumAddress).toUint8Array()\n    );\n    serializer.serializeStr(this.authenticationFunction);\n  }\n\n  static deserialize(deserializer: Deserializer) {\n    const domain = deserializer.deserializeStr();\n    const ethereumAddressBytes = deserializer.deserializeFixedBytes(20);\n    const ethereumAddress = Hex.fromHexInput(\n      ethereumAddressBytes\n    ).toString() as EthereumAddress;\n    const authenticationFunction = deserializer.deserializeStr();\n    return new EIP1193DerivedPublicKey({\n      domain,\n      ethereumAddress,\n      authenticationFunction,\n    });\n  }\n\n  // endregion\n}\n","import {\n  createStructuredMessageStatement,\n  createTransactionStatement,\n  StructuredMessage,\n} from \"@aptos-labs/derived-wallet-base\";\nimport { AnyRawTransaction, Hex, HexInput } from \"@aptos-labs/ts-sdk\";\nimport { createSiweMessage } from \"viem/siwe\";\nimport { EthereumAddress } from \"./shared\";\n\nexport interface CreateSiweEnvelopeInput {\n  ethereumAddress: EthereumAddress;\n  chainId: number;\n  signingMessageDigest: HexInput;\n  issuedAt: Date;\n}\n\nfunction createSiweEnvelope(\n  input: CreateSiweEnvelopeInput & { statement: string },\n) {\n  const {\n    ethereumAddress,\n    chainId,\n    signingMessageDigest,\n    issuedAt,\n    statement,\n  } = input;\n  const digestHex = Hex.fromHexInput(signingMessageDigest).toString();\n  return createSiweMessage({\n    address: ethereumAddress,\n    domain: window.location.host,\n    uri: window.location.origin,\n    chainId,\n    nonce: digestHex,\n    statement,\n    version: \"1\",\n    issuedAt,\n  });\n}\n\nexport function createSiweEnvelopeForAptosStructuredMessage(\n  input: CreateSiweEnvelopeInput & { structuredMessage: StructuredMessage },\n) {\n  const { structuredMessage, ...rest } = input;\n  const statement = createStructuredMessageStatement(structuredMessage);\n  return createSiweEnvelope({ ...rest, statement });\n}\n\nexport function createSiweEnvelopeForAptosTransaction(\n  input: CreateSiweEnvelopeInput & {\n    rawTransaction: AnyRawTransaction;\n  },\n) {\n  const { rawTransaction, ...rest } = input;\n  const statement = createTransactionStatement(rawTransaction);\n  return createSiweEnvelope({ ...rest, statement });\n}\n","import {\n  Deserializer,\n  Hex,\n  HexInput,\n  Serializer,\n  Signature,\n} from \"@aptos-labs/ts-sdk\";\n\n/**\n * A classs representing a signature of a message signed with EIP1193\n */\nexport class EIP1193PersonalSignature extends Signature {\n  static readonly LENGTH = 65;\n  protected readonly _siweSignature: Uint8Array;\n\n  constructor(siweSignature: HexInput) {\n    super();\n    this._siweSignature = Hex.fromHexInput(siweSignature).toUint8Array();\n  }\n\n  get siweSignature() {\n    return Hex.fromHexInput(this._siweSignature).toString();\n  }\n\n  serialize(serializer: Serializer) {\n    serializer.serializeBytes(this._siweSignature);\n  }\n\n  static deserialize(deserializer: Deserializer) {\n    const signature = deserializer.deserializeBytes();\n    return new EIP1193PersonalSignature(signature);\n  }\n}\n\n/**\n * A class representing a signature of a message signed with EIP1193 and following the SIWE standard\n */\nexport class EIP1193SiweSignature extends EIP1193PersonalSignature {\n  // The date and time when the signature was issued\n  readonly issuedAt: Date;\n  // The scheme in the URI of the message, e.g. the scheme of the website that requested the signature (http, https, etc.)\n  readonly scheme: string;\n\n  constructor(scheme: string, issuedAt: Date, siweSignature: HexInput) {\n    super(siweSignature);\n    this.issuedAt = issuedAt;\n    this.scheme = scheme;\n  }\n\n  override serialize(serializer: Serializer) {\n    serializer.serializeStr(this.scheme);\n    serializer.serializeStr(this.issuedAt.toISOString());\n    serializer.serializeBytes(this._siweSignature);\n  }\n\n  static override deserialize(deserializer: Deserializer) {\n    const scheme = deserializer.deserializeStr();\n    const issuedAt = new Date(deserializer.deserializeStr());\n    const siweSignature = deserializer.deserializeBytes();\n    return new EIP1193SiweSignature(scheme, issuedAt, siweSignature);\n  }\n}\n","import {\n  fetchDevnetChainId,\n  isNullCallback,\n  mapUserResponse,\n} from \"@aptos-labs/derived-wallet-base\";\nimport {\n  AccountAuthenticator,\n  AnyRawTransaction,\n  Network,\n  NetworkToChainId,\n  NetworkToNodeAPI,\n} from \"@aptos-labs/ts-sdk\";\nimport {\n  AccountInfo,\n  APTOS_CHAINS,\n  AptosChangeNetworkOutput,\n  AptosConnectOutput,\n  AptosFeatures,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  AptosWallet,\n  NetworkInfo,\n  UserResponse,\n  UserResponseStatus,\n  WalletIcon,\n} from \"@aptos-labs/wallet-standard\";\nimport { BrowserProvider } from \"ethers\";\nimport type { EIP1193Provider, EIP6963ProviderDetail } from \"mipd\";\nimport { EIP1193DerivedPublicKey } from \"./EIP1193DerivedPublicKey\";\nimport { EthereumAddress, wrapEthersUserResponse } from \"./shared\";\nimport { signAptosMessageWithEthereum } from \"./signAptosMessage\";\nimport { signAptosTransactionWithEthereum } from \"./signAptosTransaction\";\n\nconst defaultAuthenticationFunction =\n  \"0x1::ethereum_derivable_account::authenticate\";\n\nexport interface EIP1193DerivedWalletOptions {\n  authenticationFunction?: string;\n  defaultNetwork?: Network;\n}\n\nexport class EIP1193DerivedWallet implements AptosWallet {\n  readonly eip1193Provider: EIP1193Provider;\n  readonly eip1193Ethers: BrowserProvider;\n  readonly domain: string;\n  readonly authenticationFunction: string;\n  defaultNetwork: Network;\n\n  readonly version = \"1.0.0\";\n  readonly name: string;\n  readonly icon: WalletIcon;\n  readonly url: string;\n  readonly accounts = [];\n  readonly chains = APTOS_CHAINS;\n\n  constructor(\n    providerDetail: EIP6963ProviderDetail,\n    options: EIP1193DerivedWalletOptions = {}\n  ) {\n    const { info, provider } = providerDetail;\n    const {\n      authenticationFunction = defaultAuthenticationFunction,\n      defaultNetwork = Network.MAINNET,\n    } = options;\n\n    this.eip1193Provider = provider;\n    this.eip1193Ethers = new BrowserProvider(provider);\n\n    this.domain = window.location.host;\n    this.authenticationFunction = authenticationFunction;\n    this.defaultNetwork = defaultNetwork;\n    this.name = `${info.name} (Ethereum)`;\n    // Phantom's icon is wrapped with new lines :shrug:\n    this.icon = info.icon.trim() as WalletIcon;\n    this.url = info.rdns;\n  }\n\n  readonly features: AptosFeatures = {\n    \"aptos:connect\": {\n      version: \"1.0.0\",\n      connect: () => this.connect(),\n    },\n    \"aptos:disconnect\": {\n      version: \"1.0.0\",\n      disconnect: () => this.disconnect(),\n    },\n    \"aptos:account\": {\n      version: \"1.0.0\",\n      account: () => this.getActiveAccount(),\n    },\n    \"aptos:onAccountChange\": {\n      version: \"1.0.0\",\n      onAccountChange: async (callback) => this.onActiveAccountChange(callback),\n    },\n    \"aptos:network\": {\n      version: \"1.0.0\",\n      network: () => this.getActiveNetwork(),\n    },\n    \"aptos:changeNetwork\": {\n      version: \"1.0.0\",\n      changeNetwork: (newNetwork) => this.changeNetwork(newNetwork),\n    },\n    \"aptos:onNetworkChange\": {\n      version: \"1.0.0\",\n      onNetworkChange: async (callback) => this.onActiveNetworkChange(callback),\n    },\n    \"aptos:signMessage\": {\n      version: \"1.0.0\",\n      signMessage: (args) => this.signMessage(args),\n    },\n    \"aptos:signTransaction\": {\n      version: \"1.0.0\",\n      signTransaction: (...args) => this.signTransaction(...args),\n    },\n  };\n\n  private derivePublicKey(ethereumAddress: EthereumAddress) {\n    return new EIP1193DerivedPublicKey({\n      domain: this.domain,\n      ethereumAddress,\n      authenticationFunction: this.authenticationFunction,\n    });\n  }\n\n  // region Connection\n\n  async connect(): Promise<UserResponse<AptosConnectOutput>> {\n    const response = await wrapEthersUserResponse(\n      this.eip1193Ethers.getSigner()\n    );\n    return mapUserResponse(response, (account) => {\n      const publicKey = this.derivePublicKey(\n        account.address as EthereumAddress\n      );\n      const aptosAddress = publicKey.authKey().derivedAddress();\n      return new AccountInfo({ publicKey, address: aptosAddress });\n    });\n  }\n\n  async disconnect() {\n    // TODO: Eip1193 doesn't provide a \"disconnect\" method, so we have to keep track locally\n  }\n\n  // endregion\n\n  // region Accounts\n\n  async getActiveAccount() {\n    const [activeAccount] = await this.eip1193Ethers.listAccounts();\n    if (!activeAccount) {\n      throw new Error(\"Account not connected\");\n    }\n    const publicKey = this.derivePublicKey(\n      activeAccount.address as EthereumAddress\n    );\n    const aptosAddress = publicKey.authKey().derivedAddress();\n    return new AccountInfo({ publicKey, address: aptosAddress });\n  }\n\n  private onAccountsChangedListeners: ((\n    newAccounts: EthereumAddress[]\n  ) => void)[] = [];\n\n  onActiveAccountChange(callback: (newAccount: AccountInfo) => void) {\n    if (isNullCallback(callback)) {\n      for (const listener of this.onAccountsChangedListeners) {\n        this.eip1193Provider.removeListener(\"accountsChanged\", listener);\n      }\n      this.onAccountsChangedListeners = [];\n    } else {\n      const listener = ([ethereumAddress]: EthereumAddress[]) => {\n        if (!ethereumAddress) {\n          callback(undefined as any as AccountInfo);\n          return;\n        }\n        const publicKey = this.derivePublicKey(ethereumAddress);\n        const aptosAddress = publicKey.authKey().derivedAddress();\n        const account = new AccountInfo({ publicKey, address: aptosAddress });\n        callback(account);\n      };\n      this.onAccountsChangedListeners.push(listener);\n      this.eip1193Provider.on(\"accountsChanged\", listener);\n    }\n  }\n\n  // endregion\n\n  // region Networks\n\n  private onActiveNetworkChangeListeners: ((\n    newNetwork: NetworkInfo\n  ) => void)[] = [];\n\n  async getActiveNetwork(): Promise<NetworkInfo> {\n    const chainId = NetworkToChainId[this.defaultNetwork];\n    const url = NetworkToNodeAPI[this.defaultNetwork];\n    return {\n      name: this.defaultNetwork,\n      chainId,\n      url,\n    };\n  }\n\n  async changeNetwork(\n    newNetwork: NetworkInfo\n  ): Promise<UserResponse<AptosChangeNetworkOutput>> {\n    const { name, chainId, url } = newNetwork;\n    if (name === Network.CUSTOM) {\n      throw new Error(\"Custom network not currently supported\");\n    }\n    this.defaultNetwork = name;\n    for (const listener of this.onActiveNetworkChangeListeners) {\n      listener({\n        name,\n        chainId: chainId ?? NetworkToChainId[name],\n        url: url ?? NetworkToNodeAPI[name],\n      });\n    }\n    return {\n      status: UserResponseStatus.APPROVED,\n      args: { success: true },\n    };\n  }\n\n  onActiveNetworkChange(callback: (newNetwork: NetworkInfo) => void) {\n    if (isNullCallback(callback)) {\n      this.onActiveNetworkChangeListeners = [];\n    } else {\n      this.onActiveNetworkChangeListeners.push(callback);\n    }\n  }\n\n  // endregion\n\n  // region Signatures\n\n  async signMessage(\n    input: AptosSignMessageInput\n  ): Promise<UserResponse<AptosSignMessageOutput>> {\n    const chainId = input.chainId\n      ? this.defaultNetwork === Network.DEVNET\n        ? await fetchDevnetChainId()\n        : NetworkToChainId[this.defaultNetwork]\n      : undefined;\n    return signAptosMessageWithEthereum({\n      eip1193Provider: this.eip1193Provider,\n      authenticationFunction: this.authenticationFunction,\n      messageInput: {\n        ...input,\n        chainId,\n      },\n    });\n  }\n\n  async signTransaction(\n    rawTransaction: AnyRawTransaction,\n    _asFeePayer?: boolean\n  ): Promise<UserResponse<AccountAuthenticator>> {\n    return signAptosTransactionWithEthereum({\n      eip1193Provider: this.eip1193Provider,\n      authenticationFunction: this.authenticationFunction,\n      rawTransaction,\n    });\n  }\n\n  // endregion\n}\n","import {\n  makeUserApproval,\n  makeUserRejection,\n} from \"@aptos-labs/derived-wallet-base\";\nimport { UserResponse } from \"@aptos-labs/wallet-standard\";\nimport { isError as isEthersError } from \"ethers\";\n\nexport type EthereumAddress = `0x${string}`;\n\n/**\n * Adapt EIP1193 response into a UserResponse.\n * `UserRejectedRequestError` will be converted into a rejection.\n */\nexport async function wrapEthersUserResponse<TResponse>(\n  promise: Promise<TResponse>,\n): Promise<UserResponse<TResponse>> {\n  try {\n    const response = await promise;\n    return makeUserApproval(response);\n  } catch (err) {\n    if (isEthersError(err, \"ACTION_REJECTED\")) {\n      return makeUserRejection();\n    }\n    throw err;\n  }\n}\n","import {\n  encodeStructuredMessage,\n  mapUserResponse,\n  StructuredMessage,\n  StructuredMessageInput,\n} from \"@aptos-labs/derived-wallet-base\";\nimport {\n  AptosSignMessageOutput,\n  UserResponse,\n} from \"@aptos-labs/wallet-standard\";\nimport { BrowserProvider, Eip1193Provider } from \"ethers\";\nimport { EIP1193DerivedPublicKey } from \"./EIP1193DerivedPublicKey\";\nimport { EIP1193PersonalSignature } from \"./EIP1193DerivedSignature\";\nimport { EthereumAddress, wrapEthersUserResponse } from \"./shared\";\n\nexport interface SignAptosMessageWithEthereumInput {\n  eip1193Provider: Eip1193Provider | BrowserProvider;\n  ethereumAddress?: EthereumAddress;\n  authenticationFunction: string;\n  messageInput: StructuredMessageInput;\n}\n\nexport async function signAptosMessageWithEthereum(\n  input: SignAptosMessageWithEthereumInput\n): Promise<UserResponse<AptosSignMessageOutput>> {\n  const { authenticationFunction, messageInput } = input;\n  const eip1193Provider =\n    input.eip1193Provider instanceof BrowserProvider\n      ? input.eip1193Provider\n      : new BrowserProvider(input.eip1193Provider);\n\n  const accounts = await eip1193Provider.listAccounts();\n  const ethereumAccount = input.ethereumAddress\n    ? accounts.find((account) => account.address === input.ethereumAddress)\n    : accounts[0];\n  if (!ethereumAccount) {\n    throw new Error(\"Account not connected\");\n  }\n  const ethereumAddress = ethereumAccount.address as EthereumAddress;\n\n  const aptosPublicKey = new EIP1193DerivedPublicKey({\n    domain: window.location.origin,\n    ethereumAddress,\n    authenticationFunction,\n  });\n\n  const { message, nonce, chainId, ...flags } = messageInput;\n  const aptosAddress = flags.address\n    ? aptosPublicKey.authKey().derivedAddress()\n    : undefined;\n  const application = flags.application ? window.location.origin : undefined;\n  const structuredMessage: StructuredMessage = {\n    address: aptosAddress?.toString(),\n    application,\n    chainId,\n    message,\n    nonce,\n  };\n\n  const signingMessage = encodeStructuredMessage(structuredMessage);\n\n  const response = await wrapEthersUserResponse(\n    ethereumAccount.signMessage(signingMessage)\n  );\n\n  return mapUserResponse(response, (siweSignature) => {\n    const signature = new EIP1193PersonalSignature(siweSignature);\n    const fullMessage = new TextDecoder().decode(signingMessage);\n    return {\n      prefix: \"APTOS\",\n      fullMessage,\n      message,\n      nonce,\n      signature,\n    };\n  });\n}\n","import {\n  DerivableAbstractPublicKey,\n  mapUserResponse,\n} from \"@aptos-labs/derived-wallet-base\";\nimport {\n  AccountAuthenticator,\n  AccountAuthenticatorAbstraction,\n  AnyRawTransaction,\n  generateSigningMessageForTransaction,\n  hashValues,\n  Serializer,\n} from \"@aptos-labs/ts-sdk\";\nimport { UserResponse } from \"@aptos-labs/wallet-standard\";\nimport { BrowserProvider, Eip1193Provider } from \"ethers\";\nimport { createSiweEnvelopeForAptosTransaction } from \"./createSiweEnvelope\";\nimport { EIP1193SiweSignature } from \"./EIP1193DerivedSignature\";\nimport { EthereumAddress, wrapEthersUserResponse } from \"./shared\";\n\n/**\n * A first byte of the signature that indicates the \"message type\", this is defined in the\n * authentication function on chain, and lets us identify the type of the message and to make\n * changes in the future if needed.\n */\nexport const SIGNATURE_TYPE = 1;\nexport interface SignAptosTransactionWithEthereumInput {\n  eip1193Provider: Eip1193Provider | BrowserProvider;\n  ethereumAddress?: EthereumAddress;\n  authenticationFunction: string;\n  rawTransaction: AnyRawTransaction;\n}\n\nexport async function signAptosTransactionWithEthereum(\n  input: SignAptosTransactionWithEthereumInput\n): Promise<UserResponse<AccountAuthenticator>> {\n  const { authenticationFunction, rawTransaction } = input;\n  const eip1193Provider =\n    input.eip1193Provider instanceof BrowserProvider\n      ? input.eip1193Provider\n      : new BrowserProvider(input.eip1193Provider);\n\n  const accounts = await eip1193Provider.listAccounts();\n  const ethereumAccount = input.ethereumAddress\n    ? accounts.find((account) => account.address === input.ethereumAddress)\n    : accounts[0];\n  if (!ethereumAccount) {\n    throw new Error(\"Account not connected\");\n  }\n  const ethereumAddress = ethereumAccount.address as EthereumAddress;\n\n  const signingMessage = generateSigningMessageForTransaction(rawTransaction);\n  const signingMessageDigest = hashValues([signingMessage]);\n\n  const chainId = rawTransaction.rawTransaction.chain_id.chainId;\n\n  // We need to provide `issuedAt` externally so that we can match it with the signature\n  const issuedAt = new Date();\n\n  const siweMessage = createSiweEnvelopeForAptosTransaction({\n    ethereumAddress,\n    chainId,\n    rawTransaction,\n    signingMessageDigest,\n    issuedAt,\n  });\n\n  const response = await wrapEthersUserResponse(\n    ethereumAccount.signMessage(siweMessage)\n  );\n\n  return mapUserResponse(response, (siweSignature) => {\n    // Serialize the signature with the signature type as the first byte.\n    const serializer = new Serializer();\n    serializer.serializeU8(SIGNATURE_TYPE);\n    // Remove the trailing colon from the scheme\n    const scheme = window.location.protocol.slice(0, -1);\n    const signature = new EIP1193SiweSignature(scheme, issuedAt, siweSignature);\n    signature.serialize(serializer);\n    const abstractSignature = serializer.toUint8Array();\n\n    // Serialize the abstract public key.\n    const abstractPublicKey = new DerivableAbstractPublicKey(\n      ethereumAddress,\n      window.location.host\n    );\n\n    return new AccountAuthenticatorAbstraction(\n      authenticationFunction,\n      signingMessageDigest,\n      abstractSignature,\n      abstractPublicKey.bcsToBytes()\n    );\n  });\n}\n","import { getWallets } from \"@wallet-standard/app\";\nimport { createStore } from \"mipd\";\nimport { EIP6963ProviderDetail } from \"mipd/src/types\";\nimport {\n  EIP1193DerivedWallet,\n  EIP1193DerivedWalletOptions,\n} from \"./EIP1193DerivedWallet\";\n\nexport function setupAutomaticEthereumWalletDerivation(\n  options: EIP1193DerivedWalletOptions = {},\n) {\n  const walletsApi = getWallets();\n  const eip6963Store = createStore();\n\n  type UnsubscribeCallback = () => void;\n  let registrations: { [name: string]: UnsubscribeCallback } = {};\n\n  const deriveAndRegisterWallet = (detail: EIP6963ProviderDetail) => {\n    const derivedWallet = new EIP1193DerivedWallet(detail, options);\n    registrations[detail.info.rdns] = walletsApi.register(derivedWallet);\n  };\n\n  const initialProviders = eip6963Store.getProviders();\n  for (const detail of initialProviders) {\n    deriveAndRegisterWallet(detail);\n  }\n\n  eip6963Store.subscribe((details) => {\n    for (const detail of details) {\n      deriveAndRegisterWallet(detail);\n    }\n  });\n\n  return () => {\n    eip6963Store.destroy();\n    for (const unregisterWallet of Object.values(registrations)) {\n      unregisterWallet();\n    }\n  };\n}\n"],"mappings":"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","names":["Hex","Hex","Hex","mapUserResponse","BrowserProvider","encodeStructuredMessage","encodeStructuredMessage","mapUserResponse","hashValues","Serializer","BrowserProvider","BrowserProvider","hashValues","mapUserResponse","Serializer","BrowserProvider","mapUserResponse"]}