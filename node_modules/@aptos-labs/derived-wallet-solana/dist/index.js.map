{"version":3,"sources":["../src/index.ts","../src/setupAutomaticDerivation.ts","../src/SolanaDerivedWallet.ts","../src/shared.ts","../src/signAptosMessage.ts","../src/createSiwsEnvelope.ts","../src/SolanaDerivedPublicKey.ts","../src/signAptosTransaction.ts"],"sourcesContent":["export * from './setupAutomaticDerivation';\nexport * from './signAptosMessage';\nexport * from './signAptosTransaction';\nexport * from './SolanaDerivedPublicKey';\nexport * from './SolanaDerivedWallet';\n","import {\n  isWalletAdapterCompatibleStandardWallet,\n  WalletAdapterCompatibleStandardWallet,\n} from \"@solana/wallet-adapter-base\";\nimport { StandardWalletAdapter } from \"@solana/wallet-standard-wallet-adapter-base\";\nimport { getWallets } from '@wallet-standard/app';\nimport { SolanaDerivedWallet, SolanaDomainWalletOptions } from './SolanaDerivedWallet';\n\nexport function setupAutomaticSolanaWalletDerivation(options: SolanaDomainWalletOptions = {}) {\n  const api = getWallets();\n\n  type UnsubscribeCallback = () => void;\n  let registrations: { [name: string]: UnsubscribeCallback } = {};\n\n  const isWhitelisted = (wallet: WalletAdapterCompatibleStandardWallet) => {\n    // For now, we whitelist all wallets\n    return true;\n  };\n\n  const deriveAndRegisterWallet = (wallet: WalletAdapterCompatibleStandardWallet) => {\n    const adapter = new StandardWalletAdapter({ wallet });\n    const derivedWallet = new SolanaDerivedWallet(adapter, options);\n    registrations[wallet.name] = api.register(derivedWallet);\n  };\n\n  for (const wallet of api.get()) {\n    if (isWalletAdapterCompatibleStandardWallet(wallet) && isWhitelisted(wallet)) {\n      deriveAndRegisterWallet(wallet);\n    }\n  }\n\n  const offRegister = api.on('register', (wallet) => {\n    if (isWalletAdapterCompatibleStandardWallet(wallet) && isWhitelisted(wallet)) {\n      deriveAndRegisterWallet(wallet);\n    }\n  });\n\n  const offUnregister = api.on('unregister', (wallet) => {\n    if (isWalletAdapterCompatibleStandardWallet(wallet)) {\n      const unregisterWallet = registrations[wallet.name];\n      if (unregisterWallet) {\n        unregisterWallet();\n        delete registrations[wallet.name];\n      }\n    }\n  });\n\n  return () => {\n    offRegister();\n    offUnregister();\n    for (const unregisterWallet of Object.values(registrations)) {\n      unregisterWallet();\n    }\n  };\n}\n","import { accountInfoFromPublicKey, fetchDevnetChainId, isNullCallback } from '@aptos-labs/derived-wallet-base';\nimport {\n  AccountAuthenticator,\n  AnyRawTransaction,\n  Network,\n  NetworkToChainId,\n  NetworkToNodeAPI,\n} from '@aptos-labs/ts-sdk';\nimport {\n  AccountInfo,\n  APTOS_CHAINS,\n  AptosChangeNetworkOutput,\n  AptosConnectOutput,\n  AptosFeatures,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  AptosWallet,\n  NetworkInfo,\n  UserResponse,\n  UserResponseStatus,\n  WalletIcon,\n} from \"@aptos-labs/wallet-standard\";\nimport { StandardWalletAdapter as SolanaWalletAdapter } from \"@solana/wallet-standard-wallet-adapter-base\";\nimport { PublicKey as SolanaPublicKey } from '@solana/web3.js';\nimport { defaultAuthenticationFunction } from './shared';\nimport { signAptosMessageWithSolana } from './signAptosMessage';\nimport { signAptosTransactionWithSolana } from './signAptosTransaction';\nimport { SolanaDerivedPublicKey } from './SolanaDerivedPublicKey';\n\nexport type { SolanaPublicKey };\nexport interface SolanaDomainWalletOptions {\n  authenticationFunction?: string;\n  defaultNetwork?: Network;\n}\n\nexport class SolanaDerivedWallet implements AptosWallet {\n  readonly solanaWallet: SolanaWalletAdapter;\n  readonly domain: string;\n  readonly authenticationFunction: string;\n  defaultNetwork: Network;\n\n  readonly version = \"1.0.0\";\n  readonly name: string;\n  readonly icon: WalletIcon;\n  readonly url: string;\n  readonly accounts = [];\n  readonly chains = APTOS_CHAINS;\n\n  constructor(solanaWallet: SolanaWalletAdapter, options: SolanaDomainWalletOptions = {}) {\n    const {\n      authenticationFunction = defaultAuthenticationFunction,\n      defaultNetwork = Network.MAINNET,\n    } = options;\n\n    this.solanaWallet = solanaWallet;\n    this.domain = window.location.host;\n    this.authenticationFunction = authenticationFunction;\n    this.defaultNetwork = defaultNetwork;\n    this.name = `${solanaWallet.name} (Solana)`;\n    this.icon = solanaWallet.icon;\n    this.url = solanaWallet.url;\n  }\n\n  readonly features: AptosFeatures = {\n    'aptos:connect': {\n      version: '1.0.0',\n      connect: () => this.connect(),\n    },\n    'aptos:disconnect': {\n      version: '1.0.0',\n      disconnect: () => this.disconnect(),\n    },\n    'aptos:account': {\n      version: '1.0.0',\n      account: () => this.getActiveAccount(),\n    },\n    'aptos:onAccountChange': {\n      version: '1.0.0',\n      onAccountChange: async (callback) => this.onActiveAccountChange(callback),\n    },\n    'aptos:network': {\n      version: '1.0.0',\n      network: () => this.getActiveNetwork(),\n    },\n    'aptos:changeNetwork': {\n      version: '1.0.0',\n      changeNetwork: (newNetwork) => this.changeNetwork(newNetwork),\n    },\n    'aptos:onNetworkChange': {\n      version: '1.0.0',\n      onNetworkChange: async (callback) => this.onActiveNetworkChange(callback),\n    },\n    \"aptos:signMessage\": {\n      version: '1.0.0',\n      signMessage: (args) => this.signMessage(args),\n    },\n    \"aptos:signTransaction\": {\n      version: '1.0.0',\n      signTransaction: (...args) => this.signTransaction(...args),\n    },\n  }\n\n  private derivePublicKey(solanaPublicKey: SolanaPublicKey) {\n    return new SolanaDerivedPublicKey({\n      domain: this.domain,\n      solanaPublicKey,\n      authenticationFunction: this.authenticationFunction,\n    });\n  }\n\n  // region Connection\n\n  async connect(): Promise<UserResponse<AptosConnectOutput>> {\n    await this.solanaWallet.connect();\n    if (!this.solanaWallet.publicKey) {\n      return { status: UserResponseStatus.REJECTED };\n    }\n\n    const aptosPublicKey = this.derivePublicKey(this.solanaWallet.publicKey);\n    return {\n      args: accountInfoFromPublicKey(aptosPublicKey),\n      status: UserResponseStatus.APPROVED,\n    };\n  }\n\n  async disconnect() {\n    await this.solanaWallet.disconnect();\n  }\n\n  // endregion\n\n  // region Accounts\n\n  private getActivePublicKey(): SolanaDerivedPublicKey {\n    if (!this.solanaWallet.publicKey) {\n      throw new Error('Account not connected');\n    }\n    return this.derivePublicKey(this.solanaWallet.publicKey);\n  }\n\n  async getActiveAccount() {\n    const aptosPublicKey = this.getActivePublicKey();\n    return accountInfoFromPublicKey(aptosPublicKey);\n  }\n\n  onActiveAccountChange(callback: (newAccount: AccountInfo) => void) {\n    if (isNullCallback(callback)) {\n      this.solanaWallet.off('connect')\n    } else {\n      this.solanaWallet.on('connect', (newSolanaPublicKey) => {\n        const aptosPublicKey = this.derivePublicKey(newSolanaPublicKey);\n        const newAptosAccount = accountInfoFromPublicKey(aptosPublicKey);\n        callback(newAptosAccount);\n      });\n    }\n  }\n\n  // endregion\n\n  // region Networks\n\n  readonly onActiveNetworkChangeListeners = new Set<(newNetwork: NetworkInfo) => void>();\n\n  async getActiveNetwork(): Promise<NetworkInfo> {\n    const chainId = NetworkToChainId[this.defaultNetwork];\n    const url = NetworkToNodeAPI[this.defaultNetwork];\n    return {\n      name: this.defaultNetwork,\n      chainId,\n      url,\n    };\n  }\n\n  async changeNetwork(newNetwork: NetworkInfo): Promise<UserResponse<AptosChangeNetworkOutput>> {\n    const { name, chainId, url } = newNetwork;\n    if (name === Network.CUSTOM) {\n      throw new Error('Custom network not currently supported');\n    }\n    this.defaultNetwork = name;\n    for (const listener of this.onActiveNetworkChangeListeners) {\n      listener({\n        name,\n        chainId: chainId ?? NetworkToChainId[name],\n        url: url ?? NetworkToNodeAPI[name],\n      });\n    }\n    return {\n      status: UserResponseStatus.APPROVED,\n      args: { success: true },\n    };\n  }\n\n  onActiveNetworkChange(callback: (newNetwork: NetworkInfo) => void) {\n    if (isNullCallback(callback)) {\n      this.onActiveNetworkChangeListeners.clear();\n    } else {\n      this.onActiveNetworkChangeListeners.add(callback);\n    }\n  }\n\n  // endregion\n\n  // region Signatures\n\n  async signMessage(input: AptosSignMessageInput): Promise<UserResponse<AptosSignMessageOutput>> {\n    const chainId = input.chainId ? this.defaultNetwork === Network.DEVNET ? await fetchDevnetChainId() : NetworkToChainId[this.defaultNetwork] : undefined;\n    return signAptosMessageWithSolana({\n      solanaWallet: this.solanaWallet,\n      authenticationFunction: this.authenticationFunction,\n      messageInput: {\n        ...input,\n        chainId,\n      },\n      domain: this.domain,\n    });\n  }\n\n  async signTransaction(\n    rawTransaction: AnyRawTransaction,\n    _asFeePayer?: boolean,\n  ): Promise<UserResponse<AccountAuthenticator>> {\n    return signAptosTransactionWithSolana({\n      solanaWallet: this.solanaWallet,\n      authenticationFunction: this.authenticationFunction,\n      rawTransaction,\n      domain: this.domain,\n    });\n  }\n\n  // endregion\n}\n","import { makeUserApproval, makeUserRejection } from '@aptos-labs/derived-wallet-base';\nimport { UserResponse } from '@aptos-labs/wallet-standard';\nimport { WalletError } from '@solana/wallet-adapter-base';\n\nexport const defaultAuthenticationFunction = '0x1::solana_derivable_account::authenticate';\n\n/**\n * Adapt SolanaWalletAdapter response into a UserResponse.\n * `WalletError` will be converted into a rejection.\n */\nexport async function wrapSolanaUserResponse<TResponse>(promise: Promise<TResponse>): Promise<UserResponse<TResponse>> {\n  try {\n    const response = await promise;\n    return makeUserApproval(response);\n  } catch (err) {\n    if (err instanceof WalletError && err.message === 'User rejected the request.') {\n      return makeUserRejection();\n    }\n    throw err;\n  }\n}\n","import {\n  encodeStructuredMessage,\n  mapUserResponse,\n  StructuredMessage,\n  StructuredMessageInput,\n} from '@aptos-labs/derived-wallet-base';\nimport { Ed25519Signature, hashValues } from '@aptos-labs/ts-sdk';\nimport { AptosSignMessageOutput } from '@aptos-labs/wallet-standard';\nimport { StandardWalletAdapter as SolanaWalletAdapter } from \"@solana/wallet-standard-wallet-adapter-base\";\nimport { createSiwsEnvelopeForAptosStructuredMessage } from './createSiwsEnvelope';\nimport { wrapSolanaUserResponse } from './shared';\nimport { SolanaDerivedPublicKey } from './SolanaDerivedPublicKey';\n\nexport interface StructuredMessageInputWithChainId extends StructuredMessageInput {\n  chainId?: number;\n}\n\nexport interface SignAptosMessageWithSolanaInput {\n  solanaWallet: SolanaWalletAdapter;\n  authenticationFunction: string;\n  messageInput: StructuredMessageInputWithChainId;\n  domain: string;\n}\n\nexport async function signAptosMessageWithSolana(input: SignAptosMessageWithSolanaInput) {\n  const { solanaWallet, authenticationFunction, messageInput, domain } = input;\n\n  if (!solanaWallet.signIn) {\n    throw new Error('solana:signIn not available');\n  }\n\n  const solanaPublicKey = solanaWallet.publicKey;\n  if (!solanaPublicKey) {\n    throw new Error('Account not connected');\n  }\n\n  const aptosPublicKey = new SolanaDerivedPublicKey({\n    domain,\n    solanaPublicKey,\n    authenticationFunction,\n  });\n\n  const { message, nonce, chainId, ...flags } = messageInput;\n  const aptosAddress = flags.address ? aptosPublicKey.authKey().derivedAddress() : undefined;\n  const application = flags.application ? window.location.origin : undefined;\n  const structuredMessage: StructuredMessage = {\n    address: aptosAddress?.toString(),\n    application,\n    chainId,\n    message,\n    nonce,\n  };\n\n  const signingMessage = encodeStructuredMessage(structuredMessage);\n  const signingMessageDigest = hashValues([signingMessage]);\n\n  const siwsInput = createSiwsEnvelopeForAptosStructuredMessage({\n    solanaPublicKey: aptosPublicKey.solanaPublicKey,\n    structuredMessage,\n    signingMessageDigest,\n    domain,\n  });\n\n  const response = await wrapSolanaUserResponse(solanaWallet.signIn(siwsInput));\n\n  return mapUserResponse(response, (output): AptosSignMessageOutput => {\n    if (output.signatureType && output.signatureType !== 'ed25519') {\n      throw new Error('Unsupported signature type');\n    }\n\n    // The wallet might change some of the fields in the SIWS input, so we\n    // might need to include the finalized input in the signature.\n    // For now, we can assume the input is unchanged.\n    const signature = new Ed25519Signature(output.signature);\n    const fullMessage = new TextDecoder().decode(signingMessage);\n\n    return {\n      prefix: 'APTOS',\n      fullMessage,\n      message,\n      nonce,\n      signature,\n    };\n  });\n}\n","import {\n  createStructuredMessageStatement,\n  createTransactionStatement,\n  StructuredMessage,\n} from '@aptos-labs/derived-wallet-base';\nimport { AnyRawTransaction, Hex, HexInput } from '@aptos-labs/ts-sdk';\nimport { SolanaSignInInputWithRequiredFields } from '@solana/wallet-standard-util';\nimport { PublicKey as SolanaPublicKey } from '@solana/web3.js';\n\nexport interface CreateSiwsEnvelopeInput {\n  solanaPublicKey: SolanaPublicKey;\n  signingMessageDigest: HexInput;\n  domain: string;\n}\n\nfunction createSiwsEnvelope(input: CreateSiwsEnvelopeInput & {\n  statement: string\n}): SolanaSignInInputWithRequiredFields {\n  const { solanaPublicKey, signingMessageDigest, statement, domain } = input;\n  const digestHex = Hex.fromHexInput(signingMessageDigest).toString();\n  return {\n    address: solanaPublicKey.toString(),\n    domain,\n    nonce: digestHex,\n    statement,\n  };\n}\n\n/**\n * Create a SIWS envelope for an Aptos structured message.\n * A signature on the Solana blockchain by `solanaPublicKey` will be\n * considered as valid signature on the Aptos blockchain for the provided message.\n */\nexport function createSiwsEnvelopeForAptosStructuredMessage(\n  input: CreateSiwsEnvelopeInput & { structuredMessage: StructuredMessage },\n): SolanaSignInInputWithRequiredFields {\n  const { structuredMessage, ...rest } = input;\n  const statement = createStructuredMessageStatement(structuredMessage);\n  return createSiwsEnvelope({ ...rest, statement });\n}\n\n/**\n * Create a SIWS envelope for an Aptos transaction.\n * A signature on the Solana blockchain by `solanaPublicKey` will be\n * considered as valid signature on the Aptos blockchain for the provided transaction.\n */\nexport function createSiwsEnvelopeForAptosTransaction(\n  input: CreateSiwsEnvelopeInput & { rawTransaction: AnyRawTransaction },\n): SolanaSignInInputWithRequiredFields {\n  const { rawTransaction, ...rest } = input;\n  const statement = createTransactionStatement(rawTransaction);\n  return createSiwsEnvelope({ ...rest, statement });\n}\n","import { computeDerivableAuthenticationKey, parseAptosSigningMessage } from '@aptos-labs/derived-wallet-base';\nimport {\n  AccountPublicKey,\n  AptosConfig,\n  AuthenticationKey,\n  Deserializer,\n  Ed25519PublicKey,\n  Ed25519Signature,\n  hashValues,\n  HexInput,\n  Serializer,\n  Signature,\n  VerifySignatureArgs,\n} from '@aptos-labs/ts-sdk';\nimport { createSignInMessage as createSolanaSignInMessage } from '@solana/wallet-standard-util';\nimport { PublicKey as SolanaPublicKey } from '@solana/web3.js';\nimport {\n  createSiwsEnvelopeForAptosStructuredMessage,\n  createSiwsEnvelopeForAptosTransaction,\n} from './createSiwsEnvelope';\n\nexport interface SolanaDerivedPublicKeyParams {\n  domain: string;\n  solanaPublicKey: SolanaPublicKey;\n  authenticationFunction: string;\n}\n\nexport class SolanaDerivedPublicKey extends AccountPublicKey {\n  readonly domain: string;\n  readonly solanaPublicKey: SolanaPublicKey;\n  readonly authenticationFunction: string;\n\n  readonly _authKey: AuthenticationKey;\n\n  constructor(params: SolanaDerivedPublicKeyParams) {\n    super();\n    const { domain, solanaPublicKey, authenticationFunction } = params;\n    this.domain = domain;\n    this.solanaPublicKey = solanaPublicKey;\n    this.authenticationFunction = authenticationFunction;\n\n    this._authKey = computeDerivableAuthenticationKey(\n      authenticationFunction,\n      solanaPublicKey.toBase58(),\n      domain\n    );\n  }\n\n  authKey(): AuthenticationKey {\n    return this._authKey;\n  }\n\n  verifySignature({ message, signature }: VerifySignatureArgs): boolean {\n    const parsedSigningMessage = parseAptosSigningMessage(message);\n    if (!parsedSigningMessage || !(signature instanceof Ed25519Signature)) {\n      return false;\n    }\n\n    const commonInput = {\n      solanaPublicKey: this.solanaPublicKey,\n      signingMessageDigest: hashValues([message]),\n    };\n\n    // Obtain SIWS envelope input for the signing message\n    const siwsEnvelopeInput = parsedSigningMessage.type === 'structuredMessage'\n      ? createSiwsEnvelopeForAptosStructuredMessage({\n        ...parsedSigningMessage,\n        ...commonInput,\n        domain: this.domain,\n      })\n      : createSiwsEnvelopeForAptosTransaction({\n        ...parsedSigningMessage,\n        ...commonInput,\n        domain: this.domain,\n      });\n\n    // Matching the signature will ensure that the following fields are matching:\n    // - domain\n    // - solanaPublicKey\n    // - signing message digest\n    // - chain\n    // - message and nonce (structured message)\n    // - entry function name (transaction)\n\n    // Match solana signature\n    const siwsEnvelopeBytes = createSolanaSignInMessage(siwsEnvelopeInput);\n    const ed25519PublicKey = new Ed25519PublicKey(this.solanaPublicKey.toBytes());\n    return ed25519PublicKey.verifySignature({ message: siwsEnvelopeBytes, signature });\n  }\n\n  async verifySignatureAsync(args: { aptosConfig: AptosConfig, message: HexInput, signature: Signature }): Promise<boolean> {\n    return this.verifySignature({message: args.message, signature: args.signature});\n  }\n\n  serialize(serializer: Serializer) {\n    serializer.serializeStr(this.domain);\n    serializer.serializeFixedBytes(this.solanaPublicKey.toBytes());\n    serializer.serializeStr(this.authenticationFunction);\n  }\n\n  static deserialize(deserializer: Deserializer) {\n    const domain = deserializer.deserializeStr();\n    const solanaPublicKeyBytes = deserializer.deserializeFixedBytes(32);\n    const solanaPublicKey = new SolanaPublicKey(solanaPublicKeyBytes)\n    const authenticationFunction = deserializer.deserializeStr();\n    return new SolanaDerivedPublicKey({ domain, solanaPublicKey, authenticationFunction });\n  }\n}\n","import { createSignInMessage } from '@solana/wallet-standard-util';\nimport { mapUserResponse, DerivableAbstractPublicKey } from '@aptos-labs/derived-wallet-base';\nimport {\n  AccountAuthenticator,\n  AccountAuthenticatorAbstraction,\n  AnyRawTransaction,\n  Ed25519Signature,\n  generateSigningMessageForTransaction,\n  hashValues,\n  Serializer,\n} from '@aptos-labs/ts-sdk';\nimport { PublicKey as SolanaPublicKey } from '@solana/web3.js';\nimport { StandardWalletAdapter as SolanaWalletAdapter } from \"@solana/wallet-standard-wallet-adapter-base\";\nimport { createSiwsEnvelopeForAptosTransaction } from './createSiwsEnvelope';\nimport { wrapSolanaUserResponse } from './shared';\n\n/**\n * A first byte of the signature that indicates the \"message type\", this is defined in the\n * authentication function on chain, and lets us identify the type of the message and to make\n * changes in the future if needed.\n */\nexport const SIGNATURE_TYPE = 0;\nexport interface SignAptosTransactionWithSolanaInput {\n  solanaWallet: SolanaWalletAdapter;\n  authenticationFunction: string;\n  rawTransaction: AnyRawTransaction;\n  domain: string;\n}\n\nexport async function signAptosTransactionWithSolana(input: SignAptosTransactionWithSolanaInput) {\n  const { solanaWallet, authenticationFunction, rawTransaction, domain } = input;\n\n  const solanaPublicKey = solanaWallet.publicKey;\n  if (!solanaPublicKey) {\n    throw new Error('Account not connected');\n  }\n\n  const signingMessage = generateSigningMessageForTransaction(rawTransaction);\n  const signingMessageDigest = hashValues([signingMessage]);\n\n  const siwsInput = createSiwsEnvelopeForAptosTransaction({\n    solanaPublicKey,\n    rawTransaction,\n    signingMessageDigest,\n    domain\n  });\n\n  // Prioritize SIWS if available\n  if(solanaWallet.signIn){\n\n    const response = await wrapSolanaUserResponse(solanaWallet.signIn!(siwsInput));\n    return mapUserResponse(response, (output): AccountAuthenticator => {\n      if (output.signatureType && output.signatureType !== 'ed25519') {\n        throw new Error('Unsupported signature type');\n      }\n  \n      // The wallet might change some of the fields in the SIWS input, so we\n      // might need to include the finalized input in the signature.\n      // For now, we can assume the input is unchanged.\n      const signature = new Ed25519Signature(output.signature);\n  \n      return createAccountAuthenticatorForSolanaTransaction(signature, solanaPublicKey, domain, authenticationFunction, signingMessageDigest);\n    });\n  }else if(solanaWallet.signMessage){\n    // Fallback to signMessage if SIWS is not available\n    const response = await wrapSolanaUserResponse(solanaWallet.signMessage(createSignInMessage(siwsInput)));\n    return mapUserResponse(response, (output): AccountAuthenticator => {\n      \n      // Solana signMessage standard always returns a Ed25519 signature type\n      const signature = new Ed25519Signature(output);\n\n      return createAccountAuthenticatorForSolanaTransaction(signature, solanaPublicKey, domain, authenticationFunction, signingMessageDigest);\n    });\n  }else{\n    throw new Error(`${solanaWallet.name} does not support SIWS or signMessage`);\n  }\n}\n\n// A helper function to create an AccountAuthenticator from a Solana signature\nfunction createAccountAuthenticatorForSolanaTransaction(\n  signature: Ed25519Signature, \n  solanaPublicKey: SolanaPublicKey, \n  domain: string, \n  authenticationFunction: string, \n  signingMessageDigest: Uint8Array\n) : AccountAuthenticator {\n  // Serialize the signature with the signature type as the first byte.\n  const serializer = new Serializer();\n  serializer.serializeU8(SIGNATURE_TYPE);\n  serializer.serializeBytes(signature.toUint8Array());\n  const abstractSignature = serializer.toUint8Array();\n\n  // Serialize the abstract public key.\n  const abstractPublicKey = new DerivableAbstractPublicKey(solanaPublicKey.toBase58(), domain);\n\n  return new AccountAuthenticatorAbstraction(\n    authenticationFunction,\n    signingMessageDigest,\n    abstractSignature,\n    abstractPublicKey.bcsToBytes()\n  );\n}\n"],"mappings":"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","names":["import_wallet_adapter_base","import_derived_wallet_base","import_ts_sdk","import_derived_wallet_base","import_ts_sdk","import_derived_wallet_base","import_derived_wallet_base","import_ts_sdk","createSolanaSignInMessage","SolanaPublicKey","import_wallet_standard_util","import_derived_wallet_base","import_ts_sdk"]}