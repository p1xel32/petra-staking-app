{"version":3,"sources":["../src/setupAutomaticDerivation.ts","../src/SolanaDerivedWallet.ts","../src/shared.ts","../src/signAptosMessage.ts","../src/SolanaDerivedPublicKey.ts","../src/createSiwsEnvelope.ts","../src/signAptosTransaction.ts"],"sourcesContent":["import {\n  isWalletAdapterCompatibleStandardWallet,\n  WalletAdapterCompatibleStandardWallet,\n} from \"@solana/wallet-adapter-base\";\nimport { StandardWalletAdapter } from \"@solana/wallet-standard-wallet-adapter-base\";\nimport { getWallets } from \"@wallet-standard/app\";\nimport {\n  SolanaDerivedWallet,\n  SolanaDomainWalletOptions,\n} from \"./SolanaDerivedWallet\";\n\nexport function setupAutomaticSolanaWalletDerivation(\n  options: SolanaDomainWalletOptions = {},\n) {\n  const api = getWallets();\n\n  type UnsubscribeCallback = () => void;\n  let registrations: { [name: string]: UnsubscribeCallback } = {};\n\n  const isWhitelisted = (wallet: WalletAdapterCompatibleStandardWallet) => {\n    // For now, we whitelist all wallets\n    return true;\n  };\n\n  const deriveAndRegisterWallet = (\n    wallet: WalletAdapterCompatibleStandardWallet,\n  ) => {\n    const adapter = new StandardWalletAdapter({ wallet });\n    const derivedWallet = new SolanaDerivedWallet(adapter, options);\n    registrations[wallet.name] = api.register(derivedWallet);\n  };\n\n  for (const wallet of api.get()) {\n    if (\n      isWalletAdapterCompatibleStandardWallet(wallet) &&\n      isWhitelisted(wallet)\n    ) {\n      deriveAndRegisterWallet(wallet);\n    }\n  }\n\n  const offRegister = api.on(\"register\", (wallet) => {\n    if (\n      isWalletAdapterCompatibleStandardWallet(wallet) &&\n      isWhitelisted(wallet)\n    ) {\n      deriveAndRegisterWallet(wallet);\n    }\n  });\n\n  const offUnregister = api.on(\"unregister\", (wallet) => {\n    if (isWalletAdapterCompatibleStandardWallet(wallet)) {\n      const unregisterWallet = registrations[wallet.name];\n      if (unregisterWallet) {\n        unregisterWallet();\n        delete registrations[wallet.name];\n      }\n    }\n  });\n\n  return () => {\n    offRegister();\n    offUnregister();\n    for (const unregisterWallet of Object.values(registrations)) {\n      unregisterWallet();\n    }\n  };\n}\n","import {\n  accountInfoFromPublicKey,\n  fetchDevnetChainId,\n  isNullCallback,\n} from \"@aptos-labs/derived-wallet-base\";\nimport {\n  AccountAuthenticator,\n  AnyRawTransaction,\n  Network,\n  NetworkToChainId,\n  NetworkToNodeAPI,\n} from \"@aptos-labs/ts-sdk\";\nimport {\n  AccountInfo,\n  APTOS_CHAINS,\n  AptosChangeNetworkOutput,\n  AptosConnectOutput,\n  AptosFeatures,\n  AptosSignMessageInput,\n  AptosSignMessageOutput,\n  AptosWallet,\n  NetworkInfo,\n  UserResponse,\n  UserResponseStatus,\n  WalletIcon,\n} from \"@aptos-labs/wallet-standard\";\nimport { StandardWalletAdapter as SolanaWalletAdapter } from \"@solana/wallet-standard-wallet-adapter-base\";\nimport { PublicKey as SolanaPublicKey } from \"@solana/web3.js\";\nimport { defaultAuthenticationFunction } from \"./shared\";\nimport { signAptosMessageWithSolana } from \"./signAptosMessage\";\nimport { signAptosTransactionWithSolana } from \"./signAptosTransaction\";\nimport { SolanaDerivedPublicKey } from \"./SolanaDerivedPublicKey\";\n\nexport type { SolanaPublicKey };\nexport interface SolanaDomainWalletOptions {\n  authenticationFunction?: string;\n  defaultNetwork?: Network;\n}\n\nexport class SolanaDerivedWallet implements AptosWallet {\n  readonly solanaWallet: SolanaWalletAdapter;\n  readonly domain: string;\n  readonly authenticationFunction: string;\n  defaultNetwork: Network;\n\n  readonly version = \"1.0.0\";\n  readonly name: string;\n  readonly icon: WalletIcon;\n  readonly url: string;\n  readonly accounts = [];\n  readonly chains = APTOS_CHAINS;\n\n  constructor(\n    solanaWallet: SolanaWalletAdapter,\n    options: SolanaDomainWalletOptions = {}\n  ) {\n    const {\n      authenticationFunction = defaultAuthenticationFunction,\n      defaultNetwork = Network.MAINNET,\n    } = options;\n\n    this.solanaWallet = solanaWallet;\n    this.domain = window.location.host;\n    this.authenticationFunction = authenticationFunction;\n    this.defaultNetwork = defaultNetwork;\n    this.name = `${solanaWallet.name} (Solana)`;\n    this.icon = solanaWallet.icon;\n    this.url = solanaWallet.url;\n  }\n\n  readonly features: AptosFeatures = {\n    \"aptos:connect\": {\n      version: \"1.0.0\",\n      connect: () => this.connect(),\n    },\n    \"aptos:disconnect\": {\n      version: \"1.0.0\",\n      disconnect: () => this.disconnect(),\n    },\n    \"aptos:account\": {\n      version: \"1.0.0\",\n      account: () => this.getActiveAccount(),\n    },\n    \"aptos:onAccountChange\": {\n      version: \"1.0.0\",\n      onAccountChange: async (callback) => this.onActiveAccountChange(callback),\n    },\n    \"aptos:network\": {\n      version: \"1.0.0\",\n      network: () => this.getActiveNetwork(),\n    },\n    \"aptos:changeNetwork\": {\n      version: \"1.0.0\",\n      changeNetwork: (newNetwork) => this.changeNetwork(newNetwork),\n    },\n    \"aptos:onNetworkChange\": {\n      version: \"1.0.0\",\n      onNetworkChange: async (callback) => this.onActiveNetworkChange(callback),\n    },\n    \"aptos:signMessage\": {\n      version: \"1.0.0\",\n      signMessage: (args) => this.signMessage(args),\n    },\n    \"aptos:signTransaction\": {\n      version: \"1.0.0\",\n      signTransaction: (...args) => this.signTransaction(...args),\n    },\n  };\n\n  private derivePublicKey(solanaPublicKey: SolanaPublicKey) {\n    return new SolanaDerivedPublicKey({\n      domain: this.domain,\n      solanaPublicKey,\n      authenticationFunction: this.authenticationFunction,\n    });\n  }\n\n  // region Connection\n\n  async connect(): Promise<UserResponse<AptosConnectOutput>> {\n    await this.solanaWallet.connect();\n    if (!this.solanaWallet.publicKey) {\n      return { status: UserResponseStatus.REJECTED };\n    }\n\n    const aptosPublicKey = this.derivePublicKey(this.solanaWallet.publicKey);\n    return {\n      args: accountInfoFromPublicKey(aptosPublicKey),\n      status: UserResponseStatus.APPROVED,\n    };\n  }\n\n  async disconnect() {\n    await this.solanaWallet.disconnect();\n  }\n\n  // endregion\n\n  // region Accounts\n\n  private getActivePublicKey(): SolanaDerivedPublicKey {\n    if (!this.solanaWallet.publicKey) {\n      throw new Error(\"Account not connected\");\n    }\n    return this.derivePublicKey(this.solanaWallet.publicKey);\n  }\n\n  async getActiveAccount() {\n    const aptosPublicKey = this.getActivePublicKey();\n    return accountInfoFromPublicKey(aptosPublicKey);\n  }\n\n  onActiveAccountChange(callback: (newAccount: AccountInfo) => void) {\n    if (isNullCallback(callback)) {\n      this.solanaWallet.off(\"connect\");\n    } else {\n      this.solanaWallet.on(\"connect\", (newSolanaPublicKey) => {\n        const aptosPublicKey = this.derivePublicKey(newSolanaPublicKey);\n        const newAptosAccount = accountInfoFromPublicKey(aptosPublicKey);\n        callback(newAptosAccount);\n      });\n    }\n  }\n\n  // endregion\n\n  // region Networks\n\n  readonly onActiveNetworkChangeListeners = new Set<\n    (newNetwork: NetworkInfo) => void\n  >();\n\n  async getActiveNetwork(): Promise<NetworkInfo> {\n    const chainId = NetworkToChainId[this.defaultNetwork];\n    const url = NetworkToNodeAPI[this.defaultNetwork];\n    return {\n      name: this.defaultNetwork,\n      chainId,\n      url,\n    };\n  }\n\n  async changeNetwork(\n    newNetwork: NetworkInfo\n  ): Promise<UserResponse<AptosChangeNetworkOutput>> {\n    const { name, chainId, url } = newNetwork;\n    if (name === Network.CUSTOM) {\n      throw new Error(\"Custom network not currently supported\");\n    }\n    this.defaultNetwork = name;\n    for (const listener of this.onActiveNetworkChangeListeners) {\n      listener({\n        name,\n        chainId: chainId ?? NetworkToChainId[name],\n        url: url ?? NetworkToNodeAPI[name],\n      });\n    }\n    return {\n      status: UserResponseStatus.APPROVED,\n      args: { success: true },\n    };\n  }\n\n  onActiveNetworkChange(callback: (newNetwork: NetworkInfo) => void) {\n    if (isNullCallback(callback)) {\n      this.onActiveNetworkChangeListeners.clear();\n    } else {\n      this.onActiveNetworkChangeListeners.add(callback);\n    }\n  }\n\n  // endregion\n\n  // region Signatures\n\n  async signMessage(\n    input: AptosSignMessageInput\n  ): Promise<UserResponse<AptosSignMessageOutput>> {\n    const chainId = input.chainId\n      ? this.defaultNetwork === Network.DEVNET\n        ? await fetchDevnetChainId()\n        : NetworkToChainId[this.defaultNetwork]\n      : undefined;\n    return signAptosMessageWithSolana({\n      solanaWallet: this.solanaWallet,\n      authenticationFunction: this.authenticationFunction,\n      messageInput: {\n        ...input,\n        chainId,\n      },\n      domain: this.domain,\n    });\n  }\n\n  async signTransaction(\n    rawTransaction: AnyRawTransaction,\n    _asFeePayer?: boolean\n  ): Promise<UserResponse<AccountAuthenticator>> {\n    return signAptosTransactionWithSolana({\n      solanaWallet: this.solanaWallet,\n      authenticationFunction: this.authenticationFunction,\n      rawTransaction,\n      domain: this.domain,\n    });\n  }\n\n  // endregion\n}\n","import {\n  makeUserApproval,\n  makeUserRejection,\n} from \"@aptos-labs/derived-wallet-base\";\nimport { UserResponse } from \"@aptos-labs/wallet-standard\";\nimport { WalletError } from \"@solana/wallet-adapter-base\";\n\nexport const defaultAuthenticationFunction =\n  \"0x1::solana_derivable_account::authenticate\";\n\n/**\n * Adapt SolanaWalletAdapter response into a UserResponse.\n * `WalletError` will be converted into a rejection.\n */\nexport async function wrapSolanaUserResponse<TResponse>(\n  promise: Promise<TResponse>,\n): Promise<UserResponse<TResponse>> {\n  try {\n    const response = await promise;\n    return makeUserApproval(response);\n  } catch (err) {\n    if (\n      err instanceof WalletError &&\n      err.message === \"User rejected the request.\"\n    ) {\n      return makeUserRejection();\n    }\n    throw err;\n  }\n}\n","import {\n  encodeStructuredMessage,\n  mapUserResponse,\n  StructuredMessage,\n  StructuredMessageInput,\n} from \"@aptos-labs/derived-wallet-base\";\nimport { Ed25519Signature } from \"@aptos-labs/ts-sdk\";\nimport { AptosSignMessageOutput } from \"@aptos-labs/wallet-standard\";\nimport { StandardWalletAdapter as SolanaWalletAdapter } from \"@solana/wallet-standard-wallet-adapter-base\";\nimport { wrapSolanaUserResponse } from \"./shared\";\nimport { SolanaDerivedPublicKey } from \"./SolanaDerivedPublicKey\";\n\nexport interface StructuredMessageInputWithChainId\n  extends StructuredMessageInput {\n  chainId?: number;\n}\n\nexport interface SignAptosMessageWithSolanaInput {\n  solanaWallet: SolanaWalletAdapter;\n  authenticationFunction: string;\n  messageInput: StructuredMessageInputWithChainId;\n  domain: string;\n}\n\nexport async function signAptosMessageWithSolana(\n  input: SignAptosMessageWithSolanaInput\n) {\n  const { solanaWallet, authenticationFunction, messageInput, domain } = input;\n\n  if (!solanaWallet.signMessage) {\n    throw new Error(\"solana:signMessage not available\");\n  }\n\n  const solanaPublicKey = solanaWallet.publicKey;\n  if (!solanaPublicKey) {\n    throw new Error(\"Account not connected\");\n  }\n\n  const aptosPublicKey = new SolanaDerivedPublicKey({\n    domain,\n    solanaPublicKey,\n    authenticationFunction,\n  });\n\n  const { message, nonce, chainId, ...flags } = messageInput;\n\n  const aptosAddress = flags.address\n    ? aptosPublicKey.authKey().derivedAddress()\n    : undefined;\n\n  const application = flags.application ? window.location.origin : undefined;\n  const structuredMessage: StructuredMessage = {\n    address: aptosAddress?.toString(),\n    application,\n    chainId,\n    message,\n    nonce,\n  };\n\n  const signingMessage = encodeStructuredMessage(structuredMessage);\n\n  const response = await wrapSolanaUserResponse(\n    solanaWallet.signMessage(signingMessage)\n  );\n\n  return mapUserResponse(response, (output): AptosSignMessageOutput => {\n    // Solana signMessage standard always returns a Ed25519 signature type\n    const signature = new Ed25519Signature(output);\n    const fullMessage = new TextDecoder().decode(signingMessage);\n\n    return {\n      prefix: \"APTOS\",\n      fullMessage,\n      message,\n      nonce,\n      signature,\n    };\n  });\n}\n","import {\n  computeDerivableAuthenticationKey,\n  encodeStructuredMessage,\n  parseAptosSigningMessage,\n} from \"@aptos-labs/derived-wallet-base\";\nimport {\n  AccountPublicKey,\n  AptosConfig,\n  AuthenticationKey,\n  Deserializer,\n  Ed25519PublicKey,\n  Ed25519Signature,\n  hashValues,\n  HexInput,\n  Serializer,\n  Signature,\n  VerifySignatureArgs,\n} from \"@aptos-labs/ts-sdk\";\nimport { createSignInMessage as createSolanaSignInMessage } from \"@solana/wallet-standard-util\";\nimport { PublicKey as SolanaPublicKey } from \"@solana/web3.js\";\nimport { createSiwsEnvelopeForAptosTransaction } from \"./createSiwsEnvelope\";\n\nexport interface SolanaDerivedPublicKeyParams {\n  domain: string;\n  solanaPublicKey: SolanaPublicKey;\n  authenticationFunction: string;\n}\n\nexport class SolanaDerivedPublicKey extends AccountPublicKey {\n  readonly domain: string;\n  readonly solanaPublicKey: SolanaPublicKey;\n  readonly authenticationFunction: string;\n\n  readonly _authKey: AuthenticationKey;\n\n  constructor(params: SolanaDerivedPublicKeyParams) {\n    super();\n    const { domain, solanaPublicKey, authenticationFunction } = params;\n    this.domain = domain;\n    this.solanaPublicKey = solanaPublicKey;\n    this.authenticationFunction = authenticationFunction;\n\n    this._authKey = computeDerivableAuthenticationKey(\n      authenticationFunction,\n      solanaPublicKey.toBase58(),\n      domain\n    );\n  }\n\n  authKey(): AuthenticationKey {\n    return this._authKey;\n  }\n\n  verifySignature({ message, signature }: VerifySignatureArgs): boolean {\n    const parsedSigningMessage = parseAptosSigningMessage(message);\n    if (!parsedSigningMessage || !(signature instanceof Ed25519Signature)) {\n      return false;\n    }\n\n    const commonInput = {\n      solanaPublicKey: this.solanaPublicKey,\n      signingMessageDigest: hashValues([message]),\n    };\n\n    let messageBytes: Uint8Array;\n    // Handle structured message, i.e. a message signed with AptosSignMessageInput\n    if (parsedSigningMessage.type === \"structuredMessage\") {\n      messageBytes = encodeStructuredMessage(\n        parsedSigningMessage.structuredMessage\n      );\n    } else {\n      // Handle transaction message\n      const siwsEnvelopeInput = createSiwsEnvelopeForAptosTransaction({\n        ...parsedSigningMessage,\n        ...commonInput,\n        domain: this.domain,\n      });\n      // Matching the signature will ensure that the following fields are matching:\n      // - domain\n      // - solanaPublicKey\n      // - signing message digest\n      // - chain\n      // - message and nonce (structured message)\n      // - entry function name (transaction)\n      messageBytes = createSolanaSignInMessage(siwsEnvelopeInput);\n    }\n\n    // Match solana signature\n    const ed25519PublicKey = new Ed25519PublicKey(\n      this.solanaPublicKey.toBytes()\n    );\n    return ed25519PublicKey.verifySignature({\n      message: messageBytes,\n      signature,\n    });\n  }\n\n  async verifySignatureAsync(args: {\n    aptosConfig: AptosConfig;\n    message: HexInput;\n    signature: Signature;\n  }): Promise<boolean> {\n    return this.verifySignature({\n      message: args.message,\n      signature: args.signature,\n    });\n  }\n\n  serialize(serializer: Serializer) {\n    serializer.serializeStr(this.domain);\n    serializer.serializeFixedBytes(this.solanaPublicKey.toBytes());\n    serializer.serializeStr(this.authenticationFunction);\n  }\n\n  static deserialize(deserializer: Deserializer) {\n    const domain = deserializer.deserializeStr();\n    const solanaPublicKeyBytes = deserializer.deserializeFixedBytes(32);\n    const solanaPublicKey = new SolanaPublicKey(solanaPublicKeyBytes);\n    const authenticationFunction = deserializer.deserializeStr();\n    return new SolanaDerivedPublicKey({\n      domain,\n      solanaPublicKey,\n      authenticationFunction,\n    });\n  }\n}\n","import {\n  createStructuredMessageStatement,\n  createTransactionStatement,\n  StructuredMessage,\n} from \"@aptos-labs/derived-wallet-base\";\nimport { AnyRawTransaction, Hex, HexInput } from \"@aptos-labs/ts-sdk\";\nimport { SolanaSignInInputWithRequiredFields } from \"@solana/wallet-standard-util\";\nimport { PublicKey as SolanaPublicKey } from \"@solana/web3.js\";\n\nexport interface CreateSiwsEnvelopeInput {\n  solanaPublicKey: SolanaPublicKey;\n  signingMessageDigest: HexInput;\n  domain: string;\n}\n\nfunction createSiwsEnvelope(\n  input: CreateSiwsEnvelopeInput & {\n    statement: string;\n  },\n): SolanaSignInInputWithRequiredFields {\n  const { solanaPublicKey, signingMessageDigest, statement, domain } = input;\n  const digestHex = Hex.fromHexInput(signingMessageDigest).toString();\n  return {\n    address: solanaPublicKey.toString(),\n    domain,\n    nonce: digestHex,\n    statement,\n  };\n}\n\n/**\n * Create a SIWS envelope for an Aptos structured message.\n * A signature on the Solana blockchain by `solanaPublicKey` will be\n * considered as valid signature on the Aptos blockchain for the provided message.\n */\nexport function createSiwsEnvelopeForAptosStructuredMessage(\n  input: CreateSiwsEnvelopeInput & { structuredMessage: StructuredMessage },\n): SolanaSignInInputWithRequiredFields {\n  const { structuredMessage, ...rest } = input;\n  const statement = createStructuredMessageStatement(structuredMessage);\n  return createSiwsEnvelope({ ...rest, statement });\n}\n\n/**\n * Create a SIWS envelope for an Aptos transaction.\n * A signature on the Solana blockchain by `solanaPublicKey` will be\n * considered as valid signature on the Aptos blockchain for the provided transaction.\n */\nexport function createSiwsEnvelopeForAptosTransaction(\n  input: CreateSiwsEnvelopeInput & { rawTransaction: AnyRawTransaction },\n): SolanaSignInInputWithRequiredFields {\n  const { rawTransaction, ...rest } = input;\n  const statement = createTransactionStatement(rawTransaction);\n  return createSiwsEnvelope({ ...rest, statement });\n}\n","import { createSignInMessage } from \"@solana/wallet-standard-util\";\nimport {\n  mapUserResponse,\n  DerivableAbstractPublicKey,\n} from \"@aptos-labs/derived-wallet-base\";\nimport {\n  AccountAuthenticator,\n  AccountAuthenticatorAbstraction,\n  AnyRawTransaction,\n  Ed25519Signature,\n  generateSigningMessageForTransaction,\n  hashValues,\n  Serializer,\n} from \"@aptos-labs/ts-sdk\";\nimport { PublicKey as SolanaPublicKey } from \"@solana/web3.js\";\nimport { StandardWalletAdapter as SolanaWalletAdapter } from \"@solana/wallet-standard-wallet-adapter-base\";\nimport { createSiwsEnvelopeForAptosTransaction } from \"./createSiwsEnvelope\";\nimport { wrapSolanaUserResponse } from \"./shared\";\n\n/**\n * A first byte of the signature that indicates the \"message type\", this is defined in the\n * authentication function on chain, and lets us identify the type of the message and to make\n * changes in the future if needed.\n */\nexport const SIGNATURE_TYPE = 0;\nexport interface SignAptosTransactionWithSolanaInput {\n  solanaWallet: SolanaWalletAdapter;\n  authenticationFunction: string;\n  rawTransaction: AnyRawTransaction;\n  domain: string;\n}\n\nexport async function signAptosTransactionWithSolana(\n  input: SignAptosTransactionWithSolanaInput,\n) {\n  const { solanaWallet, authenticationFunction, rawTransaction, domain } =\n    input;\n\n  const solanaPublicKey = solanaWallet.publicKey;\n  if (!solanaPublicKey) {\n    throw new Error(\"Account not connected\");\n  }\n\n  const signingMessage = generateSigningMessageForTransaction(rawTransaction);\n  const signingMessageDigest = hashValues([signingMessage]);\n\n  const siwsInput = createSiwsEnvelopeForAptosTransaction({\n    solanaPublicKey,\n    rawTransaction,\n    signingMessageDigest,\n    domain,\n  });\n\n  // Prioritize SIWS if available\n  if (solanaWallet.signIn) {\n    const response = await wrapSolanaUserResponse(\n      solanaWallet.signIn!(siwsInput),\n    );\n    return mapUserResponse(response, (output): AccountAuthenticator => {\n      if (output.signatureType && output.signatureType !== \"ed25519\") {\n        throw new Error(\"Unsupported signature type\");\n      }\n\n      // The wallet might change some of the fields in the SIWS input, so we\n      // might need to include the finalized input in the signature.\n      // For now, we can assume the input is unchanged.\n      const signature = new Ed25519Signature(output.signature);\n\n      return createAccountAuthenticatorForSolanaTransaction(\n        signature,\n        solanaPublicKey,\n        domain,\n        authenticationFunction,\n        signingMessageDigest,\n      );\n    });\n  } else if (solanaWallet.signMessage) {\n    // Fallback to signMessage if SIWS is not available\n    const response = await wrapSolanaUserResponse(\n      solanaWallet.signMessage(createSignInMessage(siwsInput)),\n    );\n    return mapUserResponse(response, (output): AccountAuthenticator => {\n      // Solana signMessage standard always returns a Ed25519 signature type\n      const signature = new Ed25519Signature(output);\n\n      return createAccountAuthenticatorForSolanaTransaction(\n        signature,\n        solanaPublicKey,\n        domain,\n        authenticationFunction,\n        signingMessageDigest,\n      );\n    });\n  } else {\n    throw new Error(\n      `${solanaWallet.name} does not support SIWS or signMessage`,\n    );\n  }\n}\n\n// A helper function to create an AccountAuthenticator from a Solana signature\nfunction createAccountAuthenticatorForSolanaTransaction(\n  signature: Ed25519Signature,\n  solanaPublicKey: SolanaPublicKey,\n  domain: string,\n  authenticationFunction: string,\n  signingMessageDigest: Uint8Array,\n): AccountAuthenticator {\n  // Serialize the signature with the signature type as the first byte.\n  const serializer = new Serializer();\n  serializer.serializeU8(SIGNATURE_TYPE);\n  serializer.serializeBytes(signature.toUint8Array());\n  const abstractSignature = serializer.toUint8Array();\n\n  // Serialize the abstract public key.\n  const abstractPublicKey = new DerivableAbstractPublicKey(\n    solanaPublicKey.toBase58(),\n    domain,\n  );\n\n  return new AccountAuthenticatorAbstraction(\n    authenticationFunction,\n    signingMessageDigest,\n    abstractSignature,\n    abstractPublicKey.bcsToBytes(),\n  );\n}\n"],"mappings":"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","names":["encodeStructuredMessage","Ed25519Signature","encodeStructuredMessage","Ed25519Signature","mapUserResponse","Ed25519Signature","hashValues","Serializer","hashValues","mapUserResponse","Ed25519Signature","Serializer"]}